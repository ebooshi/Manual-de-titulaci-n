-------------
Revisión PARTE 2

p.63 persé --> per se
R. Página 60. Este párrafo fue reescrito y el typo ya no está.

p.64 inciso 4 del ejercicio 1.1 revisa la definición del let
R. Página 61. Este ejercicio fue retirado porque no recuerdo cual era el punto y la sintázxis del operador estaba mal.

p.65 revisar el primer párrafo 
además cambiar empleado -->  empleando 
R. Página 51. El párrafo fue refactorizado para corregir el typo.

p.66  falta ¿ 
incorporar el footnote a en la descripción del juicio para asignar tipos
R. Página 63. La nota se incorporó al párrafo de introducción.

p.67 los operadores tienen abreviación del inglés, pero la del igual no...
la obsevación final está incompleta
R. Página 63. El operador fue cambiado por "eq".

p.68 ejercicio 2.1 separa las expresiones con un itemize o enumerate para 
leerlas mejor
R. Página 64. El ejercicio ahora está indexado por itemize.

p.69 explicar más sobre las reglas que involucran al fix
R. Página 66. Un párrafo fue añadido para explicar la propiedad de no terminación que el operador fix introduce.

p.70 posse --> posee
def. 3.1 es necesario que esta propiedad se enuncie sin contexto para tipar t?
porqué la preservación dices que potencialmente preserva su mismo tipo?
R. Página 66. Porque depende de como se define el operador if. el tipo puede cambiar en la cláusula else pero este no
es problema para MinHaskell porque por definición pedimos que ambas expresiones tengan el mismo tipo. El párrafo ya no
contiene esa entrada.

p.72 revisar la redacción del ejercicio 4.3, en particular la descripción del 
operador case.
R. Página 67-68. El ejercicio fue reescrito.

p.76 en la intro mencionas que darás algoritmos o procedimientos pero no veo 
una descripción de ninguno de ellos para generar una expresión alpha-equivalente.
R. Página 73, se introdujeron reglas de semántica estática para obtener expresiones alpha-equivalentes.
Con esto damos un procedimiento para derivar las mismas.

p.77 revisar def. 2.2 el uso de la tipografía para X y explicar mas [e]
R. Página 72. Se corrigió el tipo de letra para X y se agergó una pequeña descripción de la representación para la construcción
sintáctica [].

p.78 están bien las reglas de los operadores, condicional y el resto? 
me refiero al uso de la coma para separar tipos y las restricciones
Además, cómo logras que se acumulen las restricciones de toda una expresión que 
serán usadas para la unificación?
R. Página 73. cada coma delimita una restricción en la lista de restricciones R, puedo cambiar el carácter separador por
":" si lo crees conveniente para que se lea mejor.
Con respecto a la acumulación de restricciones, El jucio funciona concatenando las restricciones generadas por cada elemento de la expresión al inicio seguido las nuevas restricciones formuladas a partir de la expresión que se está analizando. Al final se acumulan todas como si fuera una pila: las restricciones que ya estabas acarreando al inicio + las restricciones nuevas que estás analizando.

p.79 falta un ejemplo de unificación (no me queda claro el algoritmo de la 
def.3.1)
R. Página 75. El ejercicio está puesto dentro del bloque del algoritmo de unificación, evité ponerlo aquí arriba porque son ejercicios de  tres páginas y al final se iba a aplicar en algoritmo de inferencia de tipos. Agregué una descripción para mitigar esto.

p.80&81 ej4.1 
porqué deberías renombrar si no hay conflicto en los nombres de vars?
la primera restricción está mal
sigo sin comprender cómo acumulas todas las restricciones usando |--> 
tampoco veo cómo es que las reglas U definen un algoritmo
R. Página 74. La primera instrucción del algoritmo es: "se encuentra la expresión e' con nombre de variables únicas" esta e' puede ser e misma si ya posee nombre de variables únicas.
Se corrigió la restricción tenía un typo.
La acumulación de restricciones se hace empezando por la última y concatenando de izquierda a derecha.

p.84 recfun?
R. Página 78. este operador en MinHS se llamaba "letrec" las notas fueron ajustadas para que el nombrado sea consistente siendo ahora: "recfun".

p.96 turing --> Turing
R. Página 90, el typo fue corregido.

p.99 la def.1.4 le falta un símbolo en la primera frase
creo que también falta un símbolo en la 3a regla
R. Página 93, si, faltaba un símbolo \succ, este fue arreglado y el párrafo removido.

p.100 recfun?
R. Página 94, este operador en MinHS se llamaba "letrec" las notas fueron ajustadas para que el nombrado sea consistente siendo ahora: "recfun".

p.101 ejemplo1.1 mencionas closures pero creo que no han sido propiamente 
definidos
porqué se repiten algunos pasos en la evaluación?
R. Página 95. se omitió la mención de las cerraduras hasta su definición mas adelante en el mismo capítulo. La repetición de pasos fue una omisión de mi parte, ya fue corregida.

p.102 qué importancia tiene cambiar de evaluación perezosa a ansiosa?
R. Página 97. La evaluación perezosa permite omitir cómputos que no son necesarios hasta que la evaluación requiere de estos. Aquí las definiciones fueron ajustadas para
incluir el ambiente que es la principal diferencia entre ambas máquinas.

p.103 revisar def.2.2 y def.2.3, creo que el bullet denota al ambiente vacío y 
no a cualquier ambiente E.
R. Página 97. Correcto, aquí en lugar del \bullet era \E, esto.s

p.106&107 
aquí no se usa la alpha equivalencia?
R. página 101, este ejemplo estaba mal, la alpha equivalencia evitaba el caso que se quería demostrar, este ejemplo fue removido.

p.110 todos deben llamarse ejercicio y no ejemplo
en el 3.2 recfun?
R. página 104. La etiqueta fue cambiada por ejercicio. 

p.113 revisar redacción del 3er párrafo
R. Página 108. Se corrigió la redacción.

p.114 def.2.1 
vardec ya no tiene --
call no fue definida y tampoco return.
R. Página 107 y 109 la sintáxis tenía un error de parseo al construir el PDF, este error fue corregido.

p.115 explicar las nociones de las definiciones 2.2 2.3 y 2.4
R. Páginas 109 y 110, se agregó una descripción a cada función.

p.116 vardec y fundec ya no tienen --
secu no fue definida
R. Página 107. secu es la instrucción que encierrra estatements entre corchetes {} en la sintaxis.

p.117 while y call no están definidas
R. Página 107, la sintaxis tenía un error de parseo al construir el PDF, este error fue corregido.

p.124 indicar que el polimorfismo de la OO es diferente al de Haskell
R. Página 121. Se añadió un párrafo para explicar la diferencia

p.128 chequeos --> verificaciones
R. Página 125. Se cambió la palabra.

cap.11 revisar en las definiciones la tipografía utilizada 

En las referencias falta agregar alguna sobre FWJ.
